name: Deploy

on:
  push:
    paths:
    - "deployment/worms.davideadie.dev/**"
    - ".github/workflows/deploy.yml"

jobs:

  deploy-azure:
    name: Azure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Pulumi up
      uses: pulumi/actions@v3
      with:
        command: up
        stack-name: prod
        work-dir: deployment/worms.davideadie.dev
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  deploy-database:
    name: Database
    needs: deploy-azure
    runs-on: ubuntu-latest
    env:
      SPAWNCTL_ACCESS_TOKEN: ${{ secrets.SPAWN_ACCESS_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get version
      id: vars
      run: echo ::set-output name=version::$(cat deployment/worms.davideadie.dev/database-version.txt)

    - name: Flyway Migrate
      run: >-
        docker run --rm \
          --volume ${{ github.workspace }}/src/database/migrations:/flyway/sql:ro \
          flyway/flyway:8.5.9-alpine \
          -url="jdbc:postgresql://${{ secrets.PROD_DATABASE_HOST }}:${{ secrets.PROD_DATABASE_PORT }}/${{ secrets.PROD_DATABASE_NAME }}" \
          -user="${{ secrets.PROD_DATABASE_USER }}" \
          -password="${{ secrets.PROD_DATABASE_PASSWORD }}" \
          migrate \
          -target=${{ steps.vars.outputs.version }}

    - name: Backup Database
      run: >-
        pg_dump \
          --dbname=postgresql://${{ secrets.PROD_DATABASE_USER }}:${{ secrets.PROD_DATABASE_PASSWORD }}@${{ secrets.PROD_DATABASE_HOST }}:${{ secrets.PROD_DATABASE_PORT }}/${{ secrets.PROD_DATABASE_NAME }} \
          > src/database/backup.dump

    - name: Update Data Image
      run: >-
        docker run --rm \
          --volume ${{ github.workspace }}/src/database:/spawn/database \
          -e SPAWNCTL_ACCESS_TOKEN \
          redgatefoundry/spawnctl \
          create di -f /spawn/database/spawn-image.yml \
          --tag=latest --tag=${{ steps.vars.outputs.version }} \
          -q